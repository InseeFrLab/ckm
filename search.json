[{"path":"https://inseefrlab.github.io/ckm/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 ckm authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://inseefrlab.github.io/ckm/articles/quickstart-ckm.html","id":"step-1-add-individual-keys","dir":"Articles","previous_headings":"","what":"Step 1: Add Individual Keys","title":"Quick Start: Applying the Cell Key Method","text":"function build_individual_keys() adds column rkey dataset, containing individual keys drawn uniform distribution 0 1. can check distribution individual keys uniform:","code":"set.seed(451919) dtest_with_keys <- build_individual_keys(dtest) hist(dtest_with_keys$rkey)"},{"path":"https://inseefrlab.github.io/ckm/articles/quickstart-ckm.html","id":"apply-the-cell-key-method-in-one-step","dir":"Articles","previous_headings":"","what":"Apply the Cell Key Method in One Step","title":"Quick Start: Applying the Cell Key Method","text":"generating individual key, can directly build perturbed table. code : Build aggregated table crossing variables \"DEP\", \"DIPLOME\", \"SEXE\", \"AGE\", including margins. Compute perturbation table according parameters D (maximum deviation) V (variance distribution). Apply perturbation aggregated table. result list four elements. first element perturbed table, second transition matrix, third risk utility measures, fourth original table. can check structure perturbed table:","code":"res_ckm <- tabulate_and_apply_ckm(  df = dtest_with_keys,  cat_vars = c(\"DEP\", \"DIPLOME\", \"SEXE\", \"AGE\"),  D = 5, V = 2 ) str(res_ckm$tab) #> tibble [3,847 × 6] (S3: tbl_df/tbl/data.frame) #>  $ DEP       : chr [1:3847] \"56\" \"79\" \"01\" \"2B\" ... #>  $ DIPLOME   : chr [1:3847] \"N\" \"D\" \"N\" \"D\" ... #>  $ SEXE      : chr [1:3847] \"F\" \"F\" \"G\" \"G\" ... #>  $ AGE       : chr [1:3847] \"[50,120]\" \"[50,120]\" \"[0,26)\" \"[0,26)\" ... #>  $ nb_obs    : int [1:3847] 1 1 1 1 1 1 1 1 1 1 ... #>  $ nb_obs_ckm: num [1:3847] 0 0 0 0 0 0 0 0 0 0 ..."},{"path":[]},{"path":"https://inseefrlab.github.io/ckm/articles/quickstart-ckm.html","id":"step-1-generate-the-counting-table-with-cell-keys","dir":"Articles","previous_headings":"Apply the Cell Key Method Step by Step","what":"Step 1 Generate the Counting Table with Cell Keys","title":"Quick Start: Applying the Cell Key Method","text":"next step build counting table. need provide dataset individual keys categorical variables want cross. function tabulate_cnt_micro_data builds possible cross-tabulations (including margins) provides counts cell key (decimal part sum individual keys). marge_label argument lets set margin label (default \"Total\"), hrc_vars argument allows specify hierarchy variables needed.","code":"tab_before <- tabulate_cnt_micro_data(  df = dtest_with_keys,  cat_vars = c(\"DEP\", \"DIPLOME\", \"SEXE\", \"AGE\") )"},{"path":"https://inseefrlab.github.io/ckm/articles/quickstart-ckm.html","id":"step-2-apply-the-perturbation","dir":"Articles","previous_headings":"Apply the Cell Key Method Step by Step","what":"Step 2 Apply the Perturbation","title":"Quick Start: Applying the Cell Key Method","text":"next step apply perturbation previous table. need specify least: table perturb Maximum deviation D (e.g., D=5 means data perturbed integer -5 +5) Variance V probability distribution. higher variance, greater overall perturbation (e.g., measured mean absolute deviation).","code":"res_ckm <- apply_ckm(tab_before, D = 5, V = 2) str(res_ckm$tab) #> tibble [3,847 × 6] (S3: tbl_df/tbl/data.frame) #>  $ DEP       : chr [1:3847] \"56\" \"79\" \"01\" \"2B\" ... #>  $ DIPLOME   : chr [1:3847] \"N\" \"D\" \"N\" \"D\" ... #>  $ SEXE      : chr [1:3847] \"F\" \"F\" \"G\" \"G\" ... #>  $ AGE       : chr [1:3847] \"[50,120]\" \"[50,120]\" \"[0,26)\" \"[0,26)\" ... #>  $ nb_obs    : int [1:3847] 1 1 1 1 1 1 1 1 1 1 ... #>  $ nb_obs_ckm: num [1:3847] 0 0 0 0 0 0 0 0 0 0 ..."},{"path":"https://inseefrlab.github.io/ckm/articles/using-ckm-package.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Applying the Cell Key Method with the `ckm` package","text":"vignette demonstrates use key functions package apply Cell Key Method statistical disclosure control. steps include: Adding keys microdata using build_individual_keys. Comparing different transition matrices visualiser_distribution various parameter choices. Simulating risk utility measures simulate_RUs. Applying Cell Key Method tabulate_and_apply_ckm interpreting results.","code":""},{"path":"https://inseefrlab.github.io/ckm/articles/using-ckm-package.html","id":"step-1-adding-keys-to-microdata","dir":"Articles","previous_headings":"","what":"Step 1: Adding Keys to Microdata","title":"Applying the Cell Key Method with the `ckm` package","text":"First, load package example data, generate individual keys.","code":"library(dplyr) ##  ## Attaching package: 'dplyr' ## The following objects are masked from 'package:stats': ##  ##     filter, lag ## The following objects are masked from 'package:base': ##  ##     intersect, setdiff, setequal, union library(ckm)  # Load example microdata data(\"dtest\", package = \"ckm\")  # Set a seed for reproducibility set.seed(4081789)  # Add individual keys to the microdata dtest_with_keys <- build_individual_keys(dtest) head(dtest_with_keys) ##      SEXE DIPLOME      AGE    DEP    REG   TYPE  TYPE2       VAL    WEIGHT ##    <char>  <char>   <char> <char> <char> <char> <char>     <num>     <num> ## 1:      G       D  [26,50)     77     11      T     TU  9442.606 1.7778327 ## 2:      F       N [50,120]     10     44      X    VWX 10297.082 1.3046769 ## 3:      F       D   [0,26)     44     52      T     TU  9770.001 0.5867569 ## 4:      F       N  [26,50)     83     93      T     TU 10444.552 1.0662507 ## 5:      G       D [50,120]     59     32      T     TU 10586.279 1.1571308 ## 6:      F       N  [26,50)     59     32      T     TU 10330.752 1.4899395 ##         rkey ##        <num> ## 1: 0.6934088 ## 2: 0.9771298 ## 3: 0.2773011 ## 4: 0.3990830 ## 5: 0.4361497 ## 6: 0.6486956"},{"path":[]},{"path":"https://inseefrlab.github.io/ckm/articles/using-ckm-package.html","id":"step-2-1-search-feasible-transition-matrices","dir":"Articles","previous_headings":"Step 2: Comparing Transition Matrices","what":"Step 2.1: Search Feasible Transition Matrices","title":"Applying the Cell Key Method with the `ckm` package","text":"D equals 10 15 js equals 4, minimal variance let us build transition matrix isV=6.5625.","code":"test_matrices(D = 10, js = 4) ## Tested interval: [ 0 ; 30 ] ## Tested interval: [ 0 ; 15 ] ## Tested interval: [ 0 ; 7.5 ] ## Tested interval: [ 3.75 ; 7.5 ] ## Tested interval: [ 5.625 ; 7.5 ] ## Tested interval: [ 5.625 ; 6.5625 ] ## [1] 6.5625 test_matrices(D = 15, js = 4) ## Tested interval: [ 0 ; 30 ] ## Tested interval: [ 0 ; 15 ] ## Tested interval: [ 0 ; 7.5 ] ## Tested interval: [ 3.75 ; 7.5 ] ## Tested interval: [ 5.625 ; 7.5 ] ## Tested interval: [ 5.625 ; 6.5625 ] ## [1] 6.5625"},{"path":"https://inseefrlab.github.io/ckm/articles/using-ckm-package.html","id":"step-2-2-visualize-the-distributions","dir":"Articles","previous_headings":"Step 2: Comparing Transition Matrices","what":"Step 2.2: Visualize the distributions","title":"Applying the Cell Key Method with the `ckm` package","text":"compare transition matrices different values D V using visualiser_distribution.  V<=20, distributions ensures 75% absolute deviations equal 5 .","code":"# Visualize transition matrices for different parameter sets visualize_distribution(D = c(10, 15), V = c(10, 20, 30))"},{"path":"https://inseefrlab.github.io/ckm/articles/using-ckm-package.html","id":"step-3-estimating-risk-and-simulating-utility-measures","dir":"Articles","previous_headings":"","what":"Step 3: Estimating Risk and Simulating Utility Measures","title":"Applying the Cell Key Method with the `ckm` package","text":"use simulate_RUs compare risk utility different parameter sets. set n_sim = 5 quick demonstration use categorical variables REG, DIPLOME, AGE, SEXE. risk inference sensitive values lower 50% sets parameters, one can choose one maximize utility (D=15, V=10).","code":"# Define the categorical variables cat_vars <- c(\"REG\", \"DIPLOME\", \"AGE\", \"SEXE\") # Define the parameters D and V (and js if needed) to test: parameters <- build_parameters_table(Ds = c(10,15), Vs = c(10, 20), jss = 4)  # Simulate risk and utility for different parameter sets sim_results <- simulate_RUs(   df = dtest,   cat_vars = cat_vars,   parametres = parameters,   confident = 5,   n_sim = 5 ) ##  ■■■■■■■■■■■■■■■■                  50% |  ETA:  7s ##  ■■■■■■■■■■■■■■■■■■■■■■■           75% |  ETA:  4s # Display the results sim_results |>    group_by(D, V, js, i, j, risk_inference = qij) |>   summarise(MAD = mean(MAD), .groups = \"drop\") ## # A tibble: 4 × 7 ##       D     V    js i          j     risk_inference   MAD ##   <dbl> <dbl> <dbl> <chr>      <chr>          <dbl> <dbl> ## 1    10    10     4 1, 2, 3, 4 5              0.487  2.51 ## 2    10    20     4 1, 2, 3, 4 5              0.370  3.44 ## 3    15    10     4 1, 2, 3, 4 5              0.489  2.51 ## 4    15    20     4 1, 2, 3, 4 5              0.360  3.41"},{"path":"https://inseefrlab.github.io/ckm/articles/using-ckm-package.html","id":"step-4-applying-the-cell-key-method","dir":"Articles","previous_headings":"","what":"Step 4: Applying the Cell Key Method","title":"Applying the Cell Key Method with the `ckm` package","text":"Based previous results, select one set parameters (D = 15, V = 10) apply Cell Key Method using tabulate_and_apply_ckm.","code":"# Apply the Cell Key Method with chosen parameters res_ckm <- tabulate_and_apply_ckm(   df = dtest_with_keys,   cat_vars = cat_vars,   D = 15,   V = 10,   js = 4 )  # Examine the perturbed table head(res_ckm$tab |> filter(DIPLOME == \"D\") |> arrange(REG, AGE, SEXE), n = 12) ## # A tibble: 12 × 6 ##    REG   DIPLOME AGE      SEXE  nb_obs nb_obs_ckm ##    <chr> <chr>   <chr>    <chr>  <int>      <dbl> ##  1 1     D       Total    F         11          6 ##  2 1     D       Total    G         18         19 ##  3 1     D       Total    Total     29         30 ##  4 1     D       [0,26)   F          1          0 ##  5 1     D       [0,26)   G          1          7 ##  6 1     D       [0,26)   Total      2          9 ##  7 1     D       [26,50)  F          8         13 ##  8 1     D       [26,50)  G          8          7 ##  9 1     D       [26,50)  Total     16         14 ## 10 1     D       [50,120] F          2          0 ## 11 1     D       [50,120] G          9          7 ## 12 1     D       [50,120] Total     11         10"},{"path":"https://inseefrlab.github.io/ckm/articles/utiliser-ckm.html","id":"une-étape-préalable-poser-les-clés-individuelles","dir":"Articles","previous_headings":"","what":"Une étape préalable: poser les clés individuelles","title":"Appliquer la méthode des clés aléatoires","text":"La fonction build_individual_keys() ajoute à votre jeu de données une colonne rkey contenant les clés individuelles qui sont des nombres aléatoires tirés selon une loi uniforme entre 0 et 1. peut vérifier que la distribution des clés individuelles est bien uniforme.","code":"set.seed(451919) dtest_avec_cles <- build_individual_keys(dtest) hist(dtest_avec_cles$rkey)"},{"path":"https://inseefrlab.github.io/ckm/articles/utiliser-ckm.html","id":"appliquer-la-méthode-des-clés-aléatoires-en-une-étape","dir":"Articles","previous_headings":"","what":"Appliquer la méthode des clés aléatoires en une étape","title":"Appliquer la méthode des clés aléatoires","text":"Après avoir généré la clé individuelle sur votre jeu de données, il est possible de construire directement le tableau perturbé. Le code ci-dessous va réaliser les étapes suivantes: construire le tableau agrégé croisant les variables \"REG\", \"DEP\",\"DIPLOME\", \"SEXE\", \"AGE\", y compris les marges du tableau. calculer la table de pertubation en fonction des paramètres D (déviation maximale) et V (la variance de la distribution) appliquer la perturbation sur le tableau agrégé. Le résultat renvoyé est une liste de deux éléments:","code":"res_ckm <- tabulate_and_apply_ckm(  df = dtest_avec_cles,  cat_vars = c(\"DEP\",\"DIPLOME\", \"SEXE\", \"AGE\"),  D = 5, V = 2 ) str(res_ckm, max.level = 2) #> List of 4 #>  $ tab    : tibble [3,847 × 6] (S3: tbl_df/tbl/data.frame) #>  $ risque : NULL #>  $ utilite: tibble [1 × 3] (S3: tbl_df/tbl/data.frame) #>  $ ptab   :Formal class 'ptable' [package \"ptable\"] with 8 slots"},{"path":[]},{"path":"https://inseefrlab.github.io/ckm/articles/utiliser-ckm.html","id":"générer-le-tableau-de-comptages-avec-la-clé-des-cellules","dir":"Articles","previous_headings":"Appliquer la méthode des clés aléatoires étape par étape","what":"1-Générer le tableau de comptages avec la clé des cellules","title":"Appliquer la méthode des clés aléatoires","text":"La deuxième étape consiste à construire votre tableau de comptage. Il faut pour cela renseigner le jeu de données contenant la colonne avec les clés individuelles et les variables catégorielles que vous souhaitez croiser ensemble. La fonction tabulate_cnt_micro_data s’occupe de construire l’ensemble des croisements possibles - y compris les marges - et de fournir à la fois le comptage (le nombre d’individus contenu dans chaque croisement) et la clé de la cellule obtenue en récupérant la partie décimale de la somme des clés individuelles. L’argument marge_label permet de renseigner la modalité des marges (par défaut \"Total\") et l’argument hrc_vars permet de renseigner une éventuelle hiérarchie entre des variables - dans le cas où vous souhaitez que cette hiérarchie apparaisse dans une unique colonne.","code":"tab_avant <- tabulate_cnt_micro_data(  df = dtest_avec_cles,  cat_vars = c(\"DEP\",\"DIPLOME\", \"SEXE\", \"AGE\") )"},{"path":"https://inseefrlab.github.io/ckm/articles/utiliser-ckm.html","id":"appliquer-la-perturbation","dir":"Articles","previous_headings":"Appliquer la méthode des clés aléatoires étape par étape","what":"2-Appliquer la perturbation","title":"Appliquer la méthode des clés aléatoires","text":"La troisième étape consiste à appliquer la perturbation à la table précédente. Il suffit de renseigner, minima : le tableau sur lequel appliqué la perturbation la déviation maximale D. Par exemple, D=5 conduit à dévier les données d’un entier compris entre -5 et +5. la variance V de la distribution de probabilités. Plus la variance sera importante, plus la perturbation globale (mesurée par exemple par la moyenne des écarts absolus) le sera.","code":"res_ckm <- apply_ckm(tab_avant, D = 5, V = 2) str(res_ckm, max.level = 2) #> List of 4 #>  $ tab    : tibble [3,847 × 6] (S3: tbl_df/tbl/data.frame) #>  $ risque : NULL #>  $ utilite: tibble [1 × 3] (S3: tbl_df/tbl/data.frame) #>  $ ptab   :Formal class 'ptable' [package \"ptable\"] with 8 slots"},{"path":"https://inseefrlab.github.io/ckm/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Julien Jamme. Author, maintainer. Institut National de la Statistique et des Études Économiques. Copyright holder.","code":""},{"path":"https://inseefrlab.github.io/ckm/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Jamme J (2025). ckm: Applying Cell Key Method (CKM) protect tabular data. R package version 1.0.0, https://github.com/InseeFrLab/ckm.","code":"@Manual{,   title = {ckm: Applying the Cell Key Method (CKM) to protect tabular data},   author = {Julien Jamme},   year = {2025},   note = {R package version 1.0.0},   url = {https://github.com/InseeFrLab/ckm}, }"},{"path":[]},{"path":"https://inseefrlab.github.io/ckm/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"R package for applying the Cell Key Method","text":"Cell Key Method (CKM) statistical technique used protect confidentiality tabular data perturbating cells . package provides tools apply CKM R, enabling users select best set parameters generate perturbed counting tables microdata. information Cell Key Method, can refer chapter 5.4 Handbook Statistical Disclsoure Control. package designed perturb frequency tables moment.","code":""},{"path":"https://inseefrlab.github.io/ckm/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"R package for applying the Cell Key Method","text":"detailed documentation, please refer package vignette. transition matrices built using ptable package. French readers, can also refer methdological document information Cell Key Method.","code":""},{"path":"https://inseefrlab.github.io/ckm/index.html","id":"package-installation","dir":"","previous_headings":"","what":"Package Installation","title":"R package for applying the Cell Key Method","text":"","code":"# install.packages(\"remotes\") remotes::install_github(\"inseefrlab/ckm\", dependencies = TRUE)"},{"path":[]},{"path":"https://inseefrlab.github.io/ckm/index.html","id":"assigning-a-random-key-to-the-microdata","dir":"","previous_headings":"Applying the Cell Key Method Step by Step","what":"Assigning a Random Key to the Microdata","title":"R package for applying the Cell Key Method","text":"","code":"library(ckm)  data(\"dtest\", package = \"ckm\")  set.seed(4081789) # Ensure reproducibility dtest_with_keys <- build_individual_keys(dtest) hist(dtest_with_keys$rkey)"},{"path":"https://inseefrlab.github.io/ckm/index.html","id":"generating-the-counting-table-with-cell-keys","dir":"","previous_headings":"Applying the Cell Key Method Step by Step","what":"Generating the Counting Table with Cell Keys","title":"R package for applying the Cell Key Method","text":"","code":"tab_before <- tabulate_cnt_micro_data(   df = dtest_with_keys,   cat_vars = c(\"DIPLOME\", \"SEXE\", \"AGE\"),   hrc_vars = list(GEO = c(\"REG\", \"DEP\")),   marge_label = \"Total\" )"},{"path":"https://inseefrlab.github.io/ckm/index.html","id":"applying-the-perturbation","dir":"","previous_headings":"Applying the Cell Key Method Step by Step","what":"Applying the Perturbation","title":"R package for applying the Cell Key Method","text":"","code":"res_ckm <- apply_ckm(tab_before, D = 5, V = 2)"},{"path":"https://inseefrlab.github.io/ckm/index.html","id":"applying-the-cell-key-method-in-one-step","dir":"","previous_headings":"","what":"Applying the Cell Key Method in One Step","title":"R package for applying the Cell Key Method","text":"generating individual key dataset, can directly build perturbed table:","code":"res_ckm <- tabulate_and_apply_ckm(   df = dtest_with_keys,   cat_vars = c(\"DIPLOME\", \"SEXE\", \"AGE\"),   hrc_vars = list(GEO = c(\"REG\", \"DEP\")),   marge_label = \"Total\",   D = 5, V = 2 )"},{"path":"https://inseefrlab.github.io/ckm/reference/apply_ckm.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply Cell Key Method to a contingency table — apply_ckm","title":"Apply Cell Key Method to a contingency table — apply_ckm","text":"function applies Cell Key Method perturbation contingency table generated `tabulate_cnt_micro_data`, using specified deviation variance parameters.","code":""},{"path":"https://inseefrlab.github.io/ckm/reference/apply_ckm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply Cell Key Method to a contingency table — apply_ckm","text":"","code":"apply_ckm(   tab_data,   cnt_var = \"nb_obs\",   ck_var = \"ckey\",   D,   V,   js = 0,   I = NULL,   J = NULL,   ... )"},{"path":"https://inseefrlab.github.io/ckm/reference/apply_ckm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply Cell Key Method to a contingency table — apply_ckm","text":"tab_data Object returned `tabulate_cnt_micro_data` (data.frame list) cnt_var Character. Name count variable (default: \"nb_obs\") ck_var Character. Name cell key variable (must decimal 0-1) D integer. Deviation parameter (must strictly positive) V numeric. Noise variance (must strictly positive) js integer. Threshold sensitive values (default: 0). js=0, value 0 forbidden integer vector. Original values consider J integer vector. Perturbed values consider ... Additional parameters passed transition matrix creation","code":""},{"path":"https://inseefrlab.github.io/ckm/reference/apply_ckm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply Cell Key Method to a contingency table — apply_ckm","text":"List containing: - tab: Perturbed table (tibble) - risque: Risk measures (NULL empirical frequencies provided) - utilite: Utility measures (MAD, RMAD, Hellinger distance) - ptab: Transition matrix object","code":""},{"path":"https://inseefrlab.github.io/ckm/reference/apply_ckm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply Cell Key Method to a contingency table — apply_ckm","text":"","code":"if (FALSE) { # \\dontrun{ data(\"dtest\") set.seed(8245) dtest_avec_cles <- build_individual_keys(dtest)  tab_avant <- tabulate_cnt_micro_data(   df = dtest_avec_cles,   cat_vars = c(\"DIPLOME\", \"SEXE\", \"AGE\"),   hrc_vars = list(GEO = c(\"REG\", \"DEP\")),   marge_label = \"Total\",   freq_empiriq = TRUE )  res_ckm <- apply_ckm(tab_avant, D = 5, V = 2) str(res_ckm, max.level = 2)  # With a hierarchical structure tab_avant2 <- tabulate_cnt_micro_data(   df = dtest_avec_cles |> mutate(NUM = 12),   cat_vars = c(\"DIPLOME\", \"SEXE\", \"AGE\"),   hrc_vars = list(GEO = c(\"REG\", \"DEP\")),   num_var = \"NUM\",   marge_label = \"Total\",   freq_empiriq = TRUE #pour pouvoir mesurer le risque )  res_ckm2 <- apply_ckm(tab_avant2, cnt_var = \"num_tot\", D = 5, V = 2) head(res_ckm2$tab) } # }"},{"path":"https://inseefrlab.github.io/ckm/reference/assess_RU.html","id":null,"dir":"Reference","previous_headings":"","what":"Measure risk and utility for a single scenario — assess_RU","title":"Measure risk and utility for a single scenario — assess_RU","text":"Measures risk utility metrics single set CKM parameters table, using one randomly generated set record keys.","code":""},{"path":"https://inseefrlab.github.io/ckm/reference/assess_RU.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Measure risk and utility for a single scenario — assess_RU","text":"","code":"assess_RU(   df,   cat_vars,   hrc_vars = NULL,   D,   V,   js,   confident,   gv = 50,   pv = 20,   seed = NULL )"},{"path":"https://inseefrlab.github.io/ckm/reference/assess_RU.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Measure risk and utility for a single scenario — assess_RU","text":"df data.frame. Input microdata cat_vars Character vector. Categorical variables hrc_vars Named list. Hierarchical variables D integer. Deviation parameter (must strictly positive) V numeric. Noise variance (must strictly positive) js integer. Threshold sensitive values (default: 0). js=0, value 0 forbidden confident integer. Official confidentiality threshold gv integer. Threshold defining large counts (default: 50) pv integer. Threshold defining small counts (default: 20) seed integer. Random seed number. NULL, uses parent program's seed","code":""},{"path":"https://inseefrlab.github.io/ckm/reference/assess_RU.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Measure risk and utility for a single scenario — assess_RU","text":"data.frame risk utility measures chosen parameters","code":""},{"path":"https://inseefrlab.github.io/ckm/reference/assess_RU.html","id":"random-seed","dir":"Reference","previous_headings":"","what":"Random seed","title":"Measure risk and utility for a single scenario — assess_RU","text":"result identical choose add seed=123 argument opt set seed classic set.seed(123) program calling function. specified, internal function argument takes precedence.","code":""},{"path":"https://inseefrlab.github.io/ckm/reference/assess_RU.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Measure risk and utility for a single scenario — assess_RU","text":"","code":"if (FALSE) { # \\dontrun{ data(\"dtest\") set.seed(123)  res_RU <- assess_RU(   df = dtest,   cat_vars = c(\"REG\", \"DIPLOME\", \"SEXE\", \"AGE\"),   D = 10, V = 15, js = 4,   confident = 10 ) } # }"},{"path":"https://inseefrlab.github.io/ckm/reference/assess_RUs.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare risk and utility across multiple scenarios — assess_RUs","title":"Compare risk and utility across multiple scenarios — assess_RUs","text":"Measures risk utility multiple sets CKM parameters table, using one randomly generated set record keys.","code":""},{"path":"https://inseefrlab.github.io/ckm/reference/assess_RUs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare risk and utility across multiple scenarios — assess_RUs","text":"","code":"assess_RUs(   df,   cat_vars,   hrc_vars = NULL,   parametres,   confident,   gv = 50,   pv = 20,   seed = NULL )"},{"path":"https://inseefrlab.github.io/ckm/reference/assess_RUs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare risk and utility across multiple scenarios — assess_RUs","text":"df data.frame. Input microdata cat_vars Character vector. Categorical variables hrc_vars Named list. Hierarchical variables parametres data.frame. Parameter combinations test columns D, V, js confident integer. Official confidentiality threshold gv integer. Threshold defining large counts (default: 50) pv integer. Threshold defining small counts (default: 20) seed integer. Random seed number. NULL, uses parent program's seed","code":""},{"path":"https://inseefrlab.github.io/ckm/reference/assess_RUs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare risk and utility across multiple scenarios — assess_RUs","text":"data.frame nrow(parametres) rows containing risk utility measures","code":""},{"path":"https://inseefrlab.github.io/ckm/reference/assess_RUs.html","id":"random-seed","dir":"Reference","previous_headings":"","what":"Random seed","title":"Compare risk and utility across multiple scenarios — assess_RUs","text":"function, recommended use seed= argument want scenarios benefit random seed ensure results allow fair comparison scenarios.","code":""},{"path":"https://inseefrlab.github.io/ckm/reference/assess_RUs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare risk and utility across multiple scenarios — assess_RUs","text":"","code":"if (FALSE) { # \\dontrun{ parametres <- build_parameters_table(c(10,15), c(10,20), js = 5) res_RUs <- assess_RUs(   df = dtest,   cat_vars = c(\"REG\", \"DIPLOME\", \"SEXE\", \"AGE\"),   parametres = parametres,   confident = 10,   seed = 1234 ) } # }"},{"path":"https://inseefrlab.github.io/ckm/reference/assess_risk.html","id":null,"dir":"Reference","previous_headings":"","what":"Measure risk by estimating inverse transition probabilities — assess_risk","title":"Measure risk by estimating inverse transition probabilities — assess_risk","text":"Calculates probabilities P(X=|X'=j) X denotes original value X' perturbed value, providing risk measures statistical disclosure control.","code":""},{"path":"https://inseefrlab.github.io/ckm/reference/assess_risk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Measure risk by estimating inverse transition probabilities — assess_risk","text":"","code":"assess_risk(matrice_transition, freq, I, J)"},{"path":"https://inseefrlab.github.io/ckm/reference/assess_risk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Measure risk by estimating inverse transition probabilities — assess_risk","text":"matrice_transition ptable object. Object returned create_transition_matrix freq data.frame. Object returned compute_frequencies integer vector. Original values consider J integer vector. Perturbed values consider","code":""},{"path":"https://inseefrlab.github.io/ckm/reference/assess_risk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Measure risk by estimating inverse transition probabilities — assess_risk","text":"data.frame 5 columns: : original value(s) j: perturbed value(s) pi_hat: estimated probability P(X = ) pij: transition probability P(X' = j | X = ) qij: inverse transition probability P(X = | X' = j)","code":""},{"path":"https://inseefrlab.github.io/ckm/reference/assess_risk.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Measure risk by estimating inverse transition probabilities — assess_risk","text":"","code":"if (FALSE) { # \\dontrun{ library(ptable) library(dplyr) mat_trans <- create_transition_matrix(D = 5, V = 2) data(\"dtest\")  tab_comptage <- tabulate_cnt_micro_data(   df = dtest, rk = NULL,   cat_vars = c(\"DEP\", \"DIPLOME\", \"SEXE\", \"AGE\"),   marge_label = \"Total\",   freq_empiriq = TRUE )  # Calculate inverse transition probabilities P(X=i|X'=1) with i in 1:4 assess_risk(mat_trans, tab_comptage$freq, 1:4, 1)  # Calculate for multiple i and j values assess_risk(mat_trans, tab_comptage$freq, 1:4, 1:4) } # }"},{"path":"https://inseefrlab.github.io/ckm/reference/build_individual_keys.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate individual record keys — build_individual_keys","title":"Generate individual record keys — build_individual_keys","text":"Adds random decimal keys microdata Cell Key Method implementation.","code":""},{"path":"https://inseefrlab.github.io/ckm/reference/build_individual_keys.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate individual record keys — build_individual_keys","text":"","code":"build_individual_keys(microdata, nb_decim = NULL)"},{"path":"https://inseefrlab.github.io/ckm/reference/build_individual_keys.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate individual record keys — build_individual_keys","text":"microdata data.frame. Input microdata nb_decim Integer. Key precision (auto-calculated NULL)","code":""},{"path":"https://inseefrlab.github.io/ckm/reference/build_individual_keys.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate individual record keys — build_individual_keys","text":"data.table added 'rkey' column","code":""},{"path":"https://inseefrlab.github.io/ckm/reference/build_individual_keys.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate individual record keys — build_individual_keys","text":"","code":"data(\"dtest\") set.seed(123) dtest_with_keys <- build_individual_keys(dtest)"},{"path":"https://inseefrlab.github.io/ckm/reference/build_parameters_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate parameter combinations table — build_parameters_table","title":"Generate parameter combinations table — build_parameters_table","text":"Creates data.frame possible parameter combinations CKM analysis.","code":""},{"path":"https://inseefrlab.github.io/ckm/reference/build_parameters_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate parameter combinations table — build_parameters_table","text":"","code":"build_parameters_table(Ds, Vs, jss = 0)"},{"path":"https://inseefrlab.github.io/ckm/reference/build_parameters_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate parameter combinations table — build_parameters_table","text":"Ds Integer vector. Deviation values Vs Numeric vector. Variance values jss Integer vector. Sensitivity thresholds","code":""},{"path":"https://inseefrlab.github.io/ckm/reference/build_parameters_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate parameter combinations table — build_parameters_table","text":"data.frame parameter combinations","code":""},{"path":"https://inseefrlab.github.io/ckm/reference/build_parameters_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate parameter combinations table — build_parameters_table","text":"","code":"build_parameters_table(c(10,15), c(10,20), js = 5) #>    D  V js #> 1 10 10  5 #> 2 15 10  5 #> 3 10 20  5 #> 4 15 20  5"},{"path":"https://inseefrlab.github.io/ckm/reference/check_inputs.html","id":null,"dir":"Reference","previous_headings":"","what":"Check and Preprocess Input Vectors for Utility Measurement — check_inputs","title":"Check and Preprocess Input Vectors for Utility Measurement — check_inputs","text":"function validates preprocesses two numeric vectors, typically representing original perturbed data, ensure suitable utility measurement calculations. performs several checks: equal length, non-zero sums, non-negativity, absence NA values. filters elements original vector zero avoid division zero subsequent calculations (e.g., Hellinger distance), ensures resulting vectors empty.","code":""},{"path":"https://inseefrlab.github.io/ckm/reference/check_inputs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check and Preprocess Input Vectors for Utility Measurement — check_inputs","text":"","code":"check_inputs(o, p)"},{"path":"https://inseefrlab.github.io/ckm/reference/check_inputs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check and Preprocess Input Vectors for Utility Measurement — check_inputs","text":"o Numeric vector. original data vector. p Numeric vector. perturbed data vector.","code":""},{"path":"https://inseefrlab.github.io/ckm/reference/check_inputs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check and Preprocess Input Vectors for Utility Measurement — check_inputs","text":"concatenated numeric vector containing filtered original perturbed values.         first half corresponds filtered original values, second half         corresponding perturbed values.","code":""},{"path":"https://inseefrlab.github.io/ckm/reference/check_inputs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check and Preprocess Input Vectors for Utility Measurement — check_inputs","text":"function stops error : vectors different lengths. Either vector sums zero. Either vector contains negative values. Either vector contains NA values. filtering, either vector empty.","code":""},{"path":"https://inseefrlab.github.io/ckm/reference/check_inputs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check and Preprocess Input Vectors for Utility Measurement — check_inputs","text":"","code":"o <- c(1, 2, 0, 4) p <- c(1, 2, 3, 4) check_inputs(o, p) #> $o #> [1] 1 2 4 #>  #> $p #> [1] 1 2 3 4 #>"},{"path":"https://inseefrlab.github.io/ckm/reference/check_inputs_tabulate.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Inputs for Tabulation Function — check_inputs_tabulate","title":"Check Inputs for Tabulation Function — check_inputs_tabulate","text":"Validates inputs provided tabulation function, ensuring required arguments present correctly specified.","code":""},{"path":"https://inseefrlab.github.io/ckm/reference/check_inputs_tabulate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Inputs for Tabulation Function — check_inputs_tabulate","text":"","code":"check_inputs_tabulate(   df,   rk_var,   cat_vars,   hrc_vars,   num_var,   marge_label,   D,   V,   js,   I,   J )"},{"path":"https://inseefrlab.github.io/ckm/reference/check_inputs_tabulate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Inputs for Tabulation Function — check_inputs_tabulate","text":"df data frame containing data tabulated. rk_var character string specifying name individual key variable. Must single character string present df. cat_vars character vector categorical variable names. must present df. Can NULL. hrc_vars list hierarchical variable names. must present df. Can NULL. num_var character string specifying name numerical variable. Must present df. Can NULL. marge_label character string specifying label margin. Must single character string. D positive numeric value. V positive numeric value. js non-negative numeric value. positive numeric value NULL. J non-negative numeric value NULL.","code":""},{"path":"https://inseefrlab.github.io/ckm/reference/check_inputs_tabulate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Inputs for Tabulation Function — check_inputs_tabulate","text":"None. function called side effects (throws error assertion fails).","code":""},{"path":"https://inseefrlab.github.io/ckm/reference/check_inputs_tabulate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check Inputs for Tabulation Function — check_inputs_tabulate","text":"function uses assertions check validity input argument. check fails, informative error message provided.","code":""},{"path":"https://inseefrlab.github.io/ckm/reference/check_inputs_tabulate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check Inputs for Tabulation Function — check_inputs_tabulate","text":"","code":"if (FALSE) { # \\dontrun{ check_inputs_tabulate(   df = my_data,   rk_var = \"id\",   cat_vars = c(\"gender\", \"region\"),   hrc_vars = list(\"region\"),   num_var = \"income\",   marge_label = \"Total\",   D = 1,   V = 2,   js = 0,   I = NULL,   J = NULL ) } # }"},{"path":"https://inseefrlab.github.io/ckm/reference/ckm-package.html","id":null,"dir":"Reference","previous_headings":"","what":"ckm: Applying the Cell Key Method (CKM) to protect tabular data — ckm-package","title":"ckm: Applying the Cell Key Method (CKM) to protect tabular data — ckm-package","text":"ckm package implements Cell Key Method (CKM) protect tabular data provides tools choose best parameters ensure balance data utility privacy protection. CKM method protecting sensitive data tabular form applying random keys cells.","code":""},{"path":[]},{"path":"https://inseefrlab.github.io/ckm/reference/ckm-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"ckm: Applying the Cell Key Method (CKM) to protect tabular data — ckm-package","text":"Maintainer: Julien Jamme julien.jamme@insee.fr contributors: Institut National de la Statistique et des Études Économiques [copyright holder]","code":""},{"path":"https://inseefrlab.github.io/ckm/reference/compute_frequencies.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate empirical frequencies from aggregated table — compute_frequencies","title":"Calculate empirical frequencies from aggregated table — compute_frequencies","text":"Calculates empirical frequencies counts aggregated table constructed tabulate_cnt_micro_data, apply_ckm, tabulate_and_apply_ckm functions.","code":""},{"path":"https://inseefrlab.github.io/ckm/reference/compute_frequencies.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate empirical frequencies from aggregated table — compute_frequencies","text":"","code":"compute_frequencies(tableau, cat_vars, hrc_vars)"},{"path":"https://inseefrlab.github.io/ckm/reference/compute_frequencies.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate empirical frequencies from aggregated table — compute_frequencies","text":"tableau data.frame. Table generated tabulate_cnt_micro_data, apply_ckm, tabulate_and_apply_ckm functions cat_vars Character vector. Categorical variables hrc_vars Named list. Hierarchical variables","code":""},{"path":"https://inseefrlab.github.io/ckm/reference/compute_frequencies.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate empirical frequencies from aggregated table — compute_frequencies","text":"data.frame 3 columns: : count value N: number occurrences count p_hat: empirical frequency count","code":""},{"path":"https://inseefrlab.github.io/ckm/reference/compute_frequencies.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate empirical frequencies from aggregated table — compute_frequencies","text":"","code":"if (FALSE) { # \\dontrun{ library(ptable) library(dplyr) data(\"dtest\")  cat_vars1 = c(\"DEP\", \"DIPLOME\", \"SEXE\", \"AGE\") hrc_vars1 = NULL tab_comptage1 <- tabulate_cnt_micro_data(   df = dtest, rk = NULL,   cat_vars = cat_vars1,   marge_label = \"Total\" ) p_hat1 <- compute_frequencies(tab_comptage1, cat_vars1, hrc_vars1)  # With hierarchical variables: cat_vars2 = c(\"DIPLOME\", \"SEXE\", \"AGE\") hrc_vars2 = list(GEO = c(\"REG\",\"DEP\"), TYPES = c(\"TYPE\",\"TYPE2\")) tab_comptage2 <- tabulate_cnt_micro_data(   df = dtest, rk = NULL,   cat_vars = cat_vars2,   hrc_vars = hrc_vars2,   marge_label = \"Total\" ) p_hat2 <- compute_frequencies(tab_comptage2, cat_vars2, hrc_vars2) } # }"},{"path":"https://inseefrlab.github.io/ckm/reference/compute_margins.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute margins for a contingency table — compute_margins","title":"Compute margins for a contingency table — compute_margins","text":"Compute margins contingency table","code":""},{"path":"https://inseefrlab.github.io/ckm/reference/compute_margins.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute margins for a contingency table — compute_margins","text":"","code":"compute_margins(inner_cells, margins, resp_var = NULL, marge_label)"},{"path":"https://inseefrlab.github.io/ckm/reference/compute_margins.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute margins for a contingency table — compute_margins","text":"inner_cells data.table. Inner cells table margins Character vector. Margin variables resp_var Character. Response variable aggregate marge_label Character. Label margin cells","code":""},{"path":"https://inseefrlab.github.io/ckm/reference/compute_margins.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute margins for a contingency table — compute_margins","text":"data.table computed margins","code":""},{"path":"https://inseefrlab.github.io/ckm/reference/convert_desc_table_to_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert table description to variable lists — convert_desc_table_to_list","title":"Convert table description to variable lists — convert_desc_table_to_list","text":"function converts table description data frame lists categorical hierarchical variables multiple tables.","code":""},{"path":"https://inseefrlab.github.io/ckm/reference/convert_desc_table_to_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert table description to variable lists — convert_desc_table_to_list","text":"","code":"convert_desc_table_to_list(desc_tab, prefix = \"tab\")"},{"path":"https://inseefrlab.github.io/ckm/reference/convert_desc_table_to_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert table description to variable lists — convert_desc_table_to_list","text":"desc_tab data.frame. Table description columns TAB, VAR, HRC prefix character. Prefix add table names provided desc_tab (default: \"tab\")","code":""},{"path":"https://inseefrlab.github.io/ckm/reference/convert_desc_table_to_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert table description to variable lists — convert_desc_table_to_list","text":"list containing: tableaux: vector table names list_cat_vars: list categorical variables table list_hrc_vars: list hierarchical variables table","code":""},{"path":"https://inseefrlab.github.io/ckm/reference/convert_desc_table_to_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert table description to variable lists — convert_desc_table_to_list","text":"","code":"# Create example table description desc_tableaux <- data.frame(   TAB = c(rep(1,3), rep(2,4)),   VAR = c(\"DIPLOME\", \"SEXE\", \"AGE\", \"DIPLOME\", \"TYPE\", \"REG\", \"DEP\"),   HRC = c(rep(NA, 5), rep(\"GEO\",2)) ) convert_desc_table_to_list(desc_tableaux) #> $tableaux #> [1] \"tab_1\" \"tab_2\" #>  #> $list_cat_vars #> $list_cat_vars$tab_1 #> [1] \"DIPLOME\" \"SEXE\"    \"AGE\"     #>  #> $list_cat_vars$tab_2 #> [1] \"DIPLOME\" \"TYPE\"    #>  #>  #> $list_hrc_vars #> $list_hrc_vars$tab_2 #> $list_hrc_vars$tab_2$GEO #> [1] \"REG\" \"DEP\" #>  #>  #>"},{"path":"https://inseefrlab.github.io/ckm/reference/create_transition_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Cell Key Method transition matrix — create_transition_matrix","title":"Create Cell Key Method transition matrix — create_transition_matrix","text":"Wrapper function ptable::create_cnt_ptable creates transition matrix Cell Key Method specified parameters.","code":""},{"path":"https://inseefrlab.github.io/ckm/reference/create_transition_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Cell Key Method transition matrix — create_transition_matrix","text":"","code":"create_transition_matrix(D, V, js = 0, ...)"},{"path":"https://inseefrlab.github.io/ckm/reference/create_transition_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Cell Key Method transition matrix — create_transition_matrix","text":"D integer. Deviation parameter (must strictly positive) V numeric. Noise variance (must strictly positive) js integer. Threshold sensitive values (default: 0). js=0, value 0 forbidden ... Additional parameters passed ptable::create_cnt_ptable","code":""},{"path":"https://inseefrlab.github.io/ckm/reference/create_transition_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Cell Key Method transition matrix — create_transition_matrix","text":"ptable object containing transition matrix, NULL matrix constructed","code":""},{"path":"https://inseefrlab.github.io/ckm/reference/create_transition_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Cell Key Method transition matrix — create_transition_matrix","text":"","code":"if (FALSE) { # \\dontrun{ library(ptable) mat_trans <- create_transition_matrix(D = 5, V = 2) plot(mat_trans, type=\"d\") |> print() } # }"},{"path":"https://inseefrlab.github.io/ckm/reference/distance_euclid.html","id":null,"dir":"Reference","previous_headings":"","what":"Euclidean distance — distance_euclid","title":"Euclidean distance — distance_euclid","text":"Calculates Euclidean distance original perturbed count vectors.","code":""},{"path":"https://inseefrlab.github.io/ckm/reference/distance_euclid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Euclidean distance — distance_euclid","text":"","code":"distance_euclid(o, p)"},{"path":"https://inseefrlab.github.io/ckm/reference/distance_euclid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Euclidean distance — distance_euclid","text":"o numeric vector. Original values p numeric vector. Perturbed values","code":""},{"path":"https://inseefrlab.github.io/ckm/reference/distance_euclid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Euclidean distance — distance_euclid","text":"numeric. Euclidean distance value","code":""},{"path":"https://inseefrlab.github.io/ckm/reference/distance_euclid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Euclidean distance — distance_euclid","text":"","code":"distance_euclid(1:100, 11:110) #> [1] 100"},{"path":"https://inseefrlab.github.io/ckm/reference/distance_hellinger.html","id":null,"dir":"Reference","previous_headings":"","what":"Hellinger distance — distance_hellinger","title":"Hellinger distance — distance_hellinger","text":"Calculates Hellinger distance original perturbed count vectors.","code":""},{"path":"https://inseefrlab.github.io/ckm/reference/distance_hellinger.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hellinger distance — distance_hellinger","text":"","code":"distance_hellinger(o, p)"},{"path":"https://inseefrlab.github.io/ckm/reference/distance_hellinger.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hellinger distance — distance_hellinger","text":"o numeric vector. Original values p numeric vector. Perturbed values","code":""},{"path":"https://inseefrlab.github.io/ckm/reference/distance_hellinger.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Hellinger distance — distance_hellinger","text":"numeric. Hellinger distance value","code":""},{"path":"https://inseefrlab.github.io/ckm/reference/distance_hellinger.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hellinger distance — distance_hellinger","text":"","code":"distance_hellinger(1:100, 11:110) #> [1] 0.05386332"},{"path":"https://inseefrlab.github.io/ckm/reference/distance_manhattan.html","id":null,"dir":"Reference","previous_headings":"","what":"Manhattan distance — distance_manhattan","title":"Manhattan distance — distance_manhattan","text":"Calculates Manhattan distance original perturbed count vectors.","code":""},{"path":"https://inseefrlab.github.io/ckm/reference/distance_manhattan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Manhattan distance — distance_manhattan","text":"","code":"distance_manhattan(o, p)"},{"path":"https://inseefrlab.github.io/ckm/reference/distance_manhattan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Manhattan distance — distance_manhattan","text":"o numeric vector. Original values p numeric vector. Perturbed values","code":""},{"path":"https://inseefrlab.github.io/ckm/reference/distance_manhattan.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Manhattan distance — distance_manhattan","text":"numeric. Manhattan distance value","code":""},{"path":"https://inseefrlab.github.io/ckm/reference/distance_manhattan.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Manhattan distance — distance_manhattan","text":"","code":"distance_manhattan(1:100, 11:110) #> [1] 1000"},{"path":"https://inseefrlab.github.io/ckm/reference/dtest.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample dataset for CKM package — dtest","title":"Sample dataset for CKM package — dtest","text":"synthetic microdata dataset containing 6,000 records demographic geographic variables testing purposes.","code":""},{"path":"https://inseefrlab.github.io/ckm/reference/dtest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample dataset for CKM package — dtest","text":"","code":"dtest"},{"path":"https://inseefrlab.github.io/ckm/reference/dtest.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample dataset for CKM package — dtest","text":"data.table 9 variables: SEXE Gender (G = male, F = female) DIPLOME Education level (5 categories) AGE Age group (3 categories) DEP Department code REG Region code TYPE Detailed category (5 levels) TYPE2 Aggregated category (2 levels) VAL Random numeric value WEIGHT Sampling weight","code":""},{"path":"https://inseefrlab.github.io/ckm/reference/estimate_beta.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate minimal precision threshold \\(\\beta\\) for given error level α — estimate_beta","title":"Estimate minimal precision threshold \\(\\beta\\) for given error level α — estimate_beta","text":"Finds minimal \\(\\beta\\) P(|R-R'|>\\(\\beta\\)) < α given α CKM parameters.","code":""},{"path":"https://inseefrlab.github.io/ckm/reference/estimate_beta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate minimal precision threshold \\(\\beta\\) for given error level α — estimate_beta","text":"","code":"estimate_beta(   A,   B,   fun = function(a, b) { a/b * 100  },   D,   V,   js = 0,   ptab,   beta_min = 0,   beta_max = 10,   precision = 0.1,   alpha = 0.05,   posterior = FALSE )"},{"path":"https://inseefrlab.github.io/ckm/reference/estimate_beta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate minimal precision threshold \\(\\beta\\) for given error level α — estimate_beta","text":"Numerator value B Denominator value fun Function. Statistic calculation (default: /b*100) D Integer. Maximum deviation V Numeric. Noise variance js Integer. Sensitivity threshold ptab data.frame. Transition probabilities ptable beta_min Numeric. Minimum search range \\(\\beta\\) beta_max Numeric. Maximum search range \\(\\beta\\) precision Numeric. Search step size alpha Numeric. Target error level posterior Logical. Use posterior approach? (default: FALSE)","code":""},{"path":"https://inseefrlab.github.io/ckm/reference/estimate_beta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate minimal precision threshold \\(\\beta\\) for given error level α — estimate_beta","text":"Numeric. Minimal \\(\\beta\\) value","code":""},{"path":"https://inseefrlab.github.io/ckm/reference/estimate_beta.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimate minimal precision threshold \\(\\beta\\) for given error level α — estimate_beta","text":"posterior=FALSE, calculation based priori approach, , provided ratio (/B) original/real ratio. Otherwise, calculation based posteriori approach, , provided ratio (/B) ratio resulting CKM perturbation. best beta searched interval [beta_min; beta_max].","code":""},{"path":"https://inseefrlab.github.io/ckm/reference/estimate_beta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate minimal precision threshold \\(\\beta\\) for given error level α — estimate_beta","text":"","code":"library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union ptab <- ptable::create_cnt_ptable(D = 15, V = 30.1, js = 0)@pTable |>   as.data.frame() r1 <- estimate_proba_precision_statistic(   A=100,B=1500,D = 15, V = 30.1, js = 0, ptab = ptab, betas = seq(0,10,0.1) ) r1 |> filter(proba <= 0.05) |> head(1) |> pull(beta) #> [1] 0.8 estimate_beta(A=100,B=1500,D = 15, V = 30.1, js = 0, ptab = ptab) #> [1] 0.8 r2 <- estimate_proba_precision_statistic(   A=100,B=1500,   D = 15, V = 30.1, js = 0,   ptab = ptab,   betas = seq(0,10,0.1),   posterior = TRUE ) r2 |> filter(proba <= 0.05) |> head(1) |> pull(beta) #> [1] 0.8 estimate_beta(   A=100,B=1500,   D = 15, V = 30.1, js = 0,   ptab = ptab,   posterior = TRUE  ) #> [1] 0.8"},{"path":"https://inseefrlab.github.io/ckm/reference/estimate_beta_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate Confidence Intervals for Ratios Using Beta Distribution — estimate_beta_df","title":"Estimate Confidence Intervals for Ratios Using Beta Distribution — estimate_beta_df","text":"function computes confidence intervals ratios using beta distribution, unique pair numerator denominator provided data. supports sequential parallel computation, allows customization ratio function, confidence level, beta estimation parameters.","code":""},{"path":"https://inseefrlab.github.io/ckm/reference/estimate_beta_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate Confidence Intervals for Ratios Using Beta Distribution — estimate_beta_df","text":"","code":"estimate_beta_df(   data,   fun = function(a, b) { a/b * 100  },   D,   V,   js = 0,   beta_min = 0,   beta_max = 10,   precision = 0.1,   alpha = 0.05,   posterior = FALSE,   parallel = FALSE,   max_cores = NULL )"},{"path":"https://inseefrlab.github.io/ckm/reference/estimate_beta_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate Confidence Intervals for Ratios Using Beta Distribution — estimate_beta_df","text":"data data frame tibble two columns: numerators denominators. fun Function. Statistic calculation (default: /b*100) D Integer. Maximum deviation V Numeric. Noise variance js Integer. Sensitivity threshold beta_min Numeric. Minimum search range \\(\\beta\\) beta_max Numeric. Maximum search range \\(\\beta\\) precision Numeric. Search step size alpha Numeric. Target error level posterior Logical. Use posterior approach? (default: FALSE) parallel Logical. TRUE, computations performed parallel using available CPU cores. Default FALSE. max_cores Integer NULL. Maximum number CPU cores use parallel computation. NULL, uses one core.","code":""},{"path":"https://inseefrlab.github.io/ckm/reference/estimate_beta_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate Confidence Intervals for Ratios Using Beta Distribution — estimate_beta_df","text":"tibble columns: Numerator value B Denominator value R Computed ratio using fun alpha Significance level used beta Estimated confidence interval beta parameter","code":""},{"path":"https://inseefrlab.github.io/ckm/reference/estimate_beta_df.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimate Confidence Intervals for Ratios Using Beta Distribution — estimate_beta_df","text":"function removes duplicate rows input data computation. Parallel computation handled via future furrr packages.","code":""},{"path":"https://inseefrlab.github.io/ckm/reference/estimate_beta_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate Confidence Intervals for Ratios Using Beta Distribution — estimate_beta_df","text":"","code":"nums <- c(20, 80) denoms <- c(100, 200) test <- data.frame(   A = sort(rep(nums,length(denoms))),   B = rep(denoms, each = length(nums)) )  fun = \\(a,b){a/b * 100} D = 5 V = 1  # A priori approach res <- estimate_beta_df(test, fun, D, V) #> [1] \"Duplicates removed: 2\" # A posteriori approach res_ap <- estimate_beta_df(test, fun, D, V, posterior = TRUE) #> [1] \"Duplicates removed: 2\""},{"path":"https://inseefrlab.github.io/ckm/reference/estimate_proba_precision_statistic.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate probability of ratio deviation — estimate_proba_precision_statistic","title":"Estimate probability of ratio deviation — estimate_proba_precision_statistic","text":"Calculates P(|R - R'| > \\(\\beta\\)) statistic R = f(, B) given CKM parameters.","code":""},{"path":"https://inseefrlab.github.io/ckm/reference/estimate_proba_precision_statistic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate probability of ratio deviation — estimate_proba_precision_statistic","text":"","code":"estimate_proba_precision_statistic(   A,   B,   fun = function(a, b) { a/b * 100  },   D,   V,   js = 0,   ptab,   betas = c(0, 1, 5, 10, 20),   posterior = FALSE )"},{"path":"https://inseefrlab.github.io/ckm/reference/estimate_proba_precision_statistic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate probability of ratio deviation — estimate_proba_precision_statistic","text":"Numerator value B Denominator value fun Function. Statistic calculation (default: /b*100) D Integer. Maximum deviation V Numeric. Noise variance js Integer. Sensitivity threshold ptab data.frame. Transition probabilities ptable betas Numeric vector. Precision thresholds evaluate posterior Logical. Use posterior approach? (default: FALSE)","code":""},{"path":"https://inseefrlab.github.io/ckm/reference/estimate_proba_precision_statistic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate probability of ratio deviation — estimate_proba_precision_statistic","text":"data.frame beta probabilities","code":""},{"path":"https://inseefrlab.github.io/ckm/reference/estimate_proba_precision_statistic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate probability of ratio deviation — estimate_proba_precision_statistic","text":"","code":"ptab <- ptable::create_cnt_ptable(D = 15, V = 30.1, js = 0)@pTable |>   as.data.frame()  # Alpha value for the original statistic = 10/15 and different beta values estimate_proba_precision_statistic(A=10,B=15,D = 15, V = 30.1, js = 0, ptab = ptab) #> # A tibble: 5 × 2 #>    beta proba #>   <dbl> <dbl> #> 1     0 1     #> 2     1 0.981 #> 3     5 0.914 #> 4    10 0.831 #> 5    20 0.668  # Alpha value for the perturbed statistic = 10/15 and different beta' values estimate_proba_precision_statistic(   A=10,B=15,   D = 15, V = 30.1, js = 0,   ptab = ptab,   posterior = TRUE ) #> # A tibble: 5 × 2 #>    beta proba #>   <dbl> <dbl> #> 1     0 1     #> 2     1 0.977 #> 3     5 0.892 #> 4    10 0.788 #> 5    20 0.592  # For a ratio evolution estimate_proba_precision_statistic(   A=10,B=15,   fun = \\(a,b){(b/a - 1)*100},   D = 15, V = 30.1, js = 0,   ptab = ptab,   posterior = TRUE ) #> # A tibble: 5 × 2 #>    beta proba #>   <dbl> <dbl> #> 1     0 1     #> 2     1 0.977 #> 3     5 0.951 #> 4    10 0.914 #> 5    20 0.808"},{"path":"https://inseefrlab.github.io/ckm/reference/estimate_proba_precision_statistic_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate P(|R-R'|>\\(\\beta\\)), the probability of ratio deviation for a dataframe and given CKM parameter and for each \\(\\beta\\) value. — estimate_proba_precision_statistic_df","title":"Calculate P(|R-R'|>\\(\\beta\\)), the probability of ratio deviation for a dataframe and given CKM parameter and for each \\(\\beta\\) value. — estimate_proba_precision_statistic_df","text":"Calculate P(|R-R'|>\\(\\beta\\)), probability ratio deviation dataframe given CKM parameter \\(\\beta\\) value.","code":""},{"path":"https://inseefrlab.github.io/ckm/reference/estimate_proba_precision_statistic_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate P(|R-R'|>\\(\\beta\\)), the probability of ratio deviation for a dataframe and given CKM parameter and for each \\(\\beta\\) value. — estimate_proba_precision_statistic_df","text":"","code":"estimate_proba_precision_statistic_df(   data,   fun = function(a, b) { a/b * 100  },   D,   V,   js = 0,   betas = c(0, 1, 2, 5, 10, 20),   posterior = FALSE,   parallel = FALSE,   max_cores = NULL )"},{"path":"https://inseefrlab.github.io/ckm/reference/estimate_proba_precision_statistic_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate P(|R-R'|>\\(\\beta\\)), the probability of ratio deviation for a dataframe and given CKM parameter and for each \\(\\beta\\) value. — estimate_proba_precision_statistic_df","text":"data data.frame two columns corresponding numerators denominators ratios de chaque ratio fun Function. Statistic calculation (default: /b*100) D Integer. Maximum deviation V Numeric. Noise variance js Integer. Sensitivity threshold betas Numeric vector. Precision thresholds evaluate posterior Logical. Use posterior approach? (default: FALSE) parallel Boolean, whether calculation parallelized max_cores, integer, maximum number jobs run parallel","code":""},{"path":"https://inseefrlab.github.io/ckm/reference/estimate_proba_precision_statistic_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate P(|R-R'|>\\(\\beta\\)), the probability of ratio deviation for a dataframe and given CKM parameter and for each \\(\\beta\\) value. — estimate_proba_precision_statistic_df","text":"dataframe","code":""},{"path":"https://inseefrlab.github.io/ckm/reference/estimate_proba_precision_statistic_df.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate P(|R-R'|>\\(\\beta\\)), the probability of ratio deviation for a dataframe and given CKM parameter and for each \\(\\beta\\) value. — estimate_proba_precision_statistic_df","text":"posterior=FALSE, calculation based priori approach, , provided ratio (/B) original/real ratio. Otherwise, calculation based posteriori approach, , provided ratio (/B) ratio resulting CKM perturbation. #' output dataframe contains following columns: - beta: precision threshold - : numerator - B: denominator - R: ratio = /B*100 - proba: P(|R-R'|>\\(\\beta\\)) given \\(\\beta\\)","code":""},{"path":"https://inseefrlab.github.io/ckm/reference/estimate_proba_precision_statistic_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate P(|R-R'|>\\(\\beta\\)), the probability of ratio deviation for a dataframe and given CKM parameter and for each \\(\\beta\\) value. — estimate_proba_precision_statistic_df","text":"","code":"test <- data.frame(   A = sample(1:50, 10, replace = TRUE),   B = sample(50:1000, 10, replace = TRUE) )  fun = \\(a,b){a/b * 100} D = 10 V = 10 js = 4  # A priori approach (given R the original ratio) res <- estimate_proba_precision_statistic_df(test, fun, D, V) #> Duplicates removed: 0  # A posteriori approach (given R the perturbed ratio) res_ap <- estimate_proba_precision_statistic_df(test, fun, D, V, posterior = TRUE) #> Duplicates removed: 0"},{"path":"https://inseefrlab.github.io/ckm/reference/get_deviation_set.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate deviation set for a given original value — get_deviation_set","title":"Calculate deviation set for a given original value — get_deviation_set","text":"Calculates set possible perturbed values original value , given CKM parameters D js.","code":""},{"path":"https://inseefrlab.github.io/ckm/reference/get_deviation_set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate deviation set for a given original value — get_deviation_set","text":"","code":"get_deviation_set(i, D, js = 0)"},{"path":"https://inseefrlab.github.io/ckm/reference/get_deviation_set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate deviation set for a given original value — get_deviation_set","text":"integer. Original value calculate deviation set (must non-negative) D integer. Deviation parameter CKM (must strictly positive) js integer. Maximum forbidden value perturbation (must non-negative, default: 0)","code":""},{"path":"https://inseefrlab.github.io/ckm/reference/get_deviation_set.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate deviation set for a given original value — get_deviation_set","text":"integer vector. Vector possible perturbed values original value ","code":""},{"path":"https://inseefrlab.github.io/ckm/reference/get_deviation_set.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate deviation set for a given original value — get_deviation_set","text":"","code":"get_deviation_set(1, 5) # expected: 0:6 #> [1] 0 1 2 3 4 5 6 get_deviation_set(1, 5, 2) # expected: c(0,3:6) #> [1] 0 3 4 5 6 get_deviation_set(0, 5, 2) # expected: 0 #> [1] 0 get_deviation_set(5, 5, 2) # expected: c(0,3:10) #> [1]  0  3  4  5  6  7  8  9 10"},{"path":"https://inseefrlab.github.io/ckm/reference/get_possibles_set.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate possible set for a given perturbed value — get_possibles_set","title":"Calculate possible set for a given perturbed value — get_possibles_set","text":"Calculates set possible original values perturbed value j, given CKM parameters D js.","code":""},{"path":"https://inseefrlab.github.io/ckm/reference/get_possibles_set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate possible set for a given perturbed value — get_possibles_set","text":"","code":"get_possibles_set(j, D, js = 0)"},{"path":"https://inseefrlab.github.io/ckm/reference/get_possibles_set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate possible set for a given perturbed value — get_possibles_set","text":"j integer. Perturbed value calculate possible set (must non-negative) D integer. Deviation parameter CKM (must strictly positive) js integer. Maximum forbidden value perturbation (must non-negative, default: 0)","code":""},{"path":"https://inseefrlab.github.io/ckm/reference/get_possibles_set.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate possible set for a given perturbed value — get_possibles_set","text":"integer vector NULL. Vector possible original values perturbed value j,   NULL j > 0 j <= js","code":""},{"path":"https://inseefrlab.github.io/ckm/reference/get_possibles_set.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate possible set for a given perturbed value — get_possibles_set","text":"","code":"get_possibles_set(1, 5) # expected: 1:6 #> [1] 1 2 3 4 5 6 get_possibles_set(1, 5, 2) # expected: NULL #> NULL get_possibles_set(0, 5, 2) # expected: 0:5 #> [1] 0 1 2 3 4 5 get_possibles_set(5, 5, 2) # expected: 1:10 #>  [1]  1  2  3  4  5  6  7  8  9 10"},{"path":"https://inseefrlab.github.io/ckm/reference/mean_absolute_deviation.html","id":null,"dir":"Reference","previous_headings":"","what":"Mean absolute deviations — mean_absolute_deviation","title":"Mean absolute deviations — mean_absolute_deviation","text":"Calculates mean absolute deviations original perturbed values.","code":""},{"path":"https://inseefrlab.github.io/ckm/reference/mean_absolute_deviation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mean absolute deviations — mean_absolute_deviation","text":"","code":"mean_absolute_deviation(o, p)"},{"path":"https://inseefrlab.github.io/ckm/reference/mean_absolute_deviation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mean absolute deviations — mean_absolute_deviation","text":"o numeric vector. Original values p numeric vector. Perturbed values","code":""},{"path":"https://inseefrlab.github.io/ckm/reference/mean_absolute_deviation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mean absolute deviations — mean_absolute_deviation","text":"numeric. Mean absolute deviation","code":""},{"path":"https://inseefrlab.github.io/ckm/reference/mean_absolute_deviation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mean absolute deviations — mean_absolute_deviation","text":"","code":"mean_absolute_deviation(1:100, 11:110) #> [1] 10"},{"path":"https://inseefrlab.github.io/ckm/reference/mean_relative_absolute_deviation.html","id":null,"dir":"Reference","previous_headings":"","what":"Mean relative absolute deviations in percentage — mean_relative_absolute_deviation","title":"Mean relative absolute deviations in percentage — mean_relative_absolute_deviation","text":"Calculates mean relative absolute deviations original perturbed values, expressed percentage.","code":""},{"path":"https://inseefrlab.github.io/ckm/reference/mean_relative_absolute_deviation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mean relative absolute deviations in percentage — mean_relative_absolute_deviation","text":"","code":"mean_relative_absolute_deviation(o, p)"},{"path":"https://inseefrlab.github.io/ckm/reference/mean_relative_absolute_deviation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mean relative absolute deviations in percentage — mean_relative_absolute_deviation","text":"o numeric vector. Original values p numeric vector. Perturbed values","code":""},{"path":"https://inseefrlab.github.io/ckm/reference/mean_relative_absolute_deviation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mean relative absolute deviations in percentage — mean_relative_absolute_deviation","text":"numeric. Mean relative absolute deviation percentage","code":""},{"path":"https://inseefrlab.github.io/ckm/reference/mean_relative_absolute_deviation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mean relative absolute deviations in percentage — mean_relative_absolute_deviation","text":"","code":"mean_relative_absolute_deviation(1:100, 11:110) #> [1] 51.87378"},{"path":"https://inseefrlab.github.io/ckm/reference/prepare_perturbation_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Create perturbation table from transition matrix — prepare_perturbation_table","title":"Create perturbation table from transition matrix — prepare_perturbation_table","text":"Prepares perturbation lookup table transition matrix object efficient application Cell Key Method.","code":""},{"path":"https://inseefrlab.github.io/ckm/reference/prepare_perturbation_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create perturbation table from transition matrix — prepare_perturbation_table","text":"","code":"prepare_perturbation_table(matrice_transition)"},{"path":"https://inseefrlab.github.io/ckm/reference/prepare_perturbation_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create perturbation table from transition matrix — prepare_perturbation_table","text":"matrice_transition ptable object. Object created create_transition_matrix()","code":""},{"path":"https://inseefrlab.github.io/ckm/reference/prepare_perturbation_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create perturbation table from transition matrix — prepare_perturbation_table","text":"data.table containing perturbation table columns , v, p_int_lb, p_int_ub","code":""},{"path":"https://inseefrlab.github.io/ckm/reference/prepare_perturbation_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create perturbation table from transition matrix — prepare_perturbation_table","text":"","code":"if (FALSE) { # \\dontrun{ mat_trans <- create_transition_matrix(D = 5, V = 2) tab_pert <- prepare_perturbation_table(mat_trans) } # }"},{"path":"https://inseefrlab.github.io/ckm/reference/simulate_RUs.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare risk and utility across multiple scenarios with multiple simulations — simulate_RUs","title":"Compare risk and utility across multiple scenarios with multiple simulations — simulate_RUs","text":"Measures risk utility table across multiple randomly generated record key sets multiple parameter combinations.","code":""},{"path":"https://inseefrlab.github.io/ckm/reference/simulate_RUs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare risk and utility across multiple scenarios with multiple simulations — simulate_RUs","text":"","code":"simulate_RUs(   df,   cat_vars,   hrc_vars = NULL,   parametres,   confident,   gv = 50,   pv = 20,   n_sim = 10,   seed = NULL,   parallel = FALSE,   max_cores = 4,   size_workers = NULL )"},{"path":"https://inseefrlab.github.io/ckm/reference/simulate_RUs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare risk and utility across multiple scenarios with multiple simulations — simulate_RUs","text":"df data.frame. Input microdata cat_vars Character vector. Categorical variables hrc_vars Named list. Hierarchical variables parametres data.frame. Parameter combinations test columns D, V, js confident integer. Official confidentiality threshold gv integer. Threshold defining large counts (default: 50) pv integer. Threshold defining small counts (default: 20) n_sim integer. Number simulations (default: 10) seed integer. Random seed number. NULL, default value randomly drawn parallel logical. TRUE, calculations parallelized (advanced, default: FALSE) max_cores integer. Maximum number parallel workers (advanced, default: 4) size_workers integer. Memory size GB allocated thread parallel calculation (advanced). NULL default: program manages size automatically","code":""},{"path":"https://inseefrlab.github.io/ckm/reference/simulate_RUs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare risk and utility across multiple scenarios with multiple simulations — simulate_RUs","text":"data.frame n_sim * nrow(parametres) rows","code":""},{"path":"https://inseefrlab.github.io/ckm/reference/simulate_RUs.html","id":"random-seed","dir":"Reference","previous_headings":"","what":"Random seed","title":"Compare risk and utility across multiple scenarios with multiple simulations — simulate_RUs","text":"random seed ensures work reproducibility. Additionally, ensure results comparable scenarios, program ensures record key sets used. Therefore, random seed provided, program randomly draws one automatically.","code":""},{"path":"https://inseefrlab.github.io/ckm/reference/simulate_RUs.html","id":"parallelization","dir":"Reference","previous_headings":"","what":"Parallelization","title":"Compare risk and utility across multiple scenarios with multiple simulations — simulate_RUs","text":"Parallelizing calculations allows using computational power simulations, generally providing appreciable time savings. , n_sim simulations distributed across multiple cores. Parallelization beneficial time perform simulations given scenario exceeds time create workers. number workers requested user exceeds number available workers, program actually use future::availableCores() - 1 workers.","code":""},{"path":"https://inseefrlab.github.io/ckm/reference/simulate_RUs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare risk and utility across multiple scenarios with multiple simulations — simulate_RUs","text":"","code":"if (FALSE) { # \\dontrun{ parametres <- build_parameters_table(c(10,15), c(10,20), js = 5) res_sim_RUs <- simulate_RUs(   df = dtest,   cat_vars = c(\"REG\", \"DIPLOME\", \"SEXE\", \"AGE\"),   parametres = parametres,   confident = 10,   n_sim = 10,   seed = 1234 ) } # }"},{"path":"https://inseefrlab.github.io/ckm/reference/tabulate_and_apply_ckm.html","id":null,"dir":"Reference","previous_headings":"","what":"Build table and apply Cell Key Method — tabulate_and_apply_ckm","title":"Build table and apply Cell Key Method — tabulate_and_apply_ckm","text":"function constructs contingency table microdata applies Cell Key Method statistical disclosure control.","code":""},{"path":"https://inseefrlab.github.io/ckm/reference/tabulate_and_apply_ckm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build table and apply Cell Key Method — tabulate_and_apply_ckm","text":"","code":"tabulate_and_apply_ckm(   df,   rk_var = \"rkey\",   cat_vars = NULL,   hrc_vars = NULL,   num_var = NULL,   marge_label = \"Total\",   D,   V,   js = 0,   I = NULL,   J = NULL,   ... )"},{"path":"https://inseefrlab.github.io/ckm/reference/tabulate_and_apply_ckm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build table and apply Cell Key Method — tabulate_and_apply_ckm","text":"df data.frame. Input microdata rk_var Character. Individual key variable (NULL keys) cat_vars Character vector. Categorical variables hrc_vars Named list. Hierarchical variables num_var Character. Numerical variable aggregate marge_label Character. Margin label (default: \"Total\") D integer. Deviation parameter (must strictly positive) V numeric. Noise variance (must strictly positive) js integer. Threshold sensitive values (default: 0). js=0, value 0 forbidden integer vector. Original values consider J integer vector. Perturbed values consider ... Additional parameters passed transition matrix creation","code":""},{"path":"https://inseefrlab.github.io/ckm/reference/tabulate_and_apply_ckm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build table and apply Cell Key Method — tabulate_and_apply_ckm","text":"list containing perturbed table transition matrix","code":""},{"path":"https://inseefrlab.github.io/ckm/reference/tabulate_and_apply_ckm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build table and apply Cell Key Method — tabulate_and_apply_ckm","text":"","code":"if (FALSE) { # \\dontrun{ data(\"dtest\") set.seed(123) dtest_avec_cles <- build_individual_keys(dtest)  res_ckm <- tabulate_and_apply_ckm(   df = dtest_avec_cles,   cat_vars = c(\"DIPLOME\", \"SEXE\", \"AGE\"),   hrc_vars = list(GEO = c(\"REG\", \"DEP\")),   marge_label = \"Total\",   D = 10, V = 15, js = 4 ) } # }"},{"path":"https://inseefrlab.github.io/ckm/reference/tabulate_and_apply_ckm_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Build tables and apply Cell Key Method on a list — tabulate_and_apply_ckm_list","title":"Build tables and apply Cell Key Method on a list — tabulate_and_apply_ckm_list","text":"function constructs multiple tables microdata applies Cell Key Method table based description data frame specifying table structure.","code":""},{"path":"https://inseefrlab.github.io/ckm/reference/tabulate_and_apply_ckm_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build tables and apply Cell Key Method on a list — tabulate_and_apply_ckm_list","text":"","code":"tabulate_and_apply_ckm_list(   df,   rk_var = \"rkey\",   desc_tab,   marge_label = \"Total\",   prefix = \"tab\",   D,   V,   js = 0,   I = NULL,   J = NULL,   ... )"},{"path":"https://inseefrlab.github.io/ckm/reference/tabulate_and_apply_ckm_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build tables and apply Cell Key Method on a list — tabulate_and_apply_ckm_list","text":"df data.frame. Input microdata rk_var Character. Individual key variable (NULL keys) desc_tab data.frame. Table description 3 columns (TAB, VAR, HRC) describing tables construct marge_label Character. Margin label (default: \"Total\") prefix character. Prefix add table names provided desc_tab (default: \"tab\") D integer. Deviation parameter (must strictly positive) V numeric. Noise variance (must strictly positive) js integer. Threshold sensitive values (default: 0). js=0, value 0 forbidden integer vector. Original values consider J integer vector. Perturbed values consider ... Additional parameters passed transition matrix creation","code":""},{"path":"https://inseefrlab.github.io/ckm/reference/tabulate_and_apply_ckm_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build tables and apply Cell Key Method on a list — tabulate_and_apply_ckm_list","text":"list containing: tab: list tables (tibbles) CKM applied ptab: transition matrix used calculations risque: tibble risk measures table utilite: tibble utility measures table","code":""},{"path":"https://inseefrlab.github.io/ckm/reference/tabulate_and_apply_ckm_list.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Build tables and apply Cell Key Method on a list — tabulate_and_apply_ckm_list","text":"desc_tab data frame must following structure: TAB: Table name number VAR: Variable name table HRC: Hierarchy name variable hierarchical relationship, NA otherwise Variables hierarchical relationships listed decreasing order hierarchy (broadest finest level). Le data.frame à fournir dans l'argument desc_tab doit être constitué de telle façon que: 1) Le data.frame doit contenir les 3 colonnes suivantes:   * TAB: Nom ou numéro de la table   * VAR: Nom d'une variable de la table   * HRC: Si la variable une relation hiérarchique avec une autre des variables de la table  mentionner un nom pour cette hiérarchie. Sinon, NA 2) Une ligne correspond à une variable d'une table donnée 3) Deux variables (ex: REGION et DEPARTEMENT) d'une même table ayant une relation hiérarchique  doivent recevoir la même valeur dans la colonne HRC. Ces variables  doivent être renseignées dans l'ordre décroissant de la hiérarchie,  cad du niveau le plus large (ex: REGION) au niveau le plus fin (ex: DEPARTEMENT).","code":""},{"path":"https://inseefrlab.github.io/ckm/reference/tabulate_and_apply_ckm_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build tables and apply Cell Key Method on a list — tabulate_and_apply_ckm_list","text":"","code":"if (FALSE) { # \\dontrun{ data(\"dtest\") set.seed(123) dtest_avec_cles <- build_individual_keys(dtest)  # Define two tables: # tab1: DIPLOME * SEXE * AGE # tab2: DIPLOME * TYPE * REG * DEP, where REG > DEP desc_tableaux <- data.frame(   TAB = c(rep(1,3), rep(2,4)),   VAR = c(\"DIPLOME\", \"SEXE\", \"AGE\", \"DIPLOME\", \"TYPE\", \"REG\", \"DEP\"),   HRC = c(rep(NA, 5), rep(\"GEO\",2)) )  res_ckm <- tabulate_and_apply_ckm_list(   df = dtest_avec_cles,   desc_tab = desc_tableaux,   marge_label = \"Total\",   D = 10, V = 15, js = 4 ) } # }"},{"path":"https://inseefrlab.github.io/ckm/reference/tabulate_cnt_micro_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Build contingency table with margins from microdata — tabulate_cnt_micro_data","title":"Build contingency table with margins from microdata — tabulate_cnt_micro_data","text":"Constructs complete contingency table possible margins microdata, including cell keys optional numerical aggregation.","code":""},{"path":"https://inseefrlab.github.io/ckm/reference/tabulate_cnt_micro_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build contingency table with margins from microdata — tabulate_cnt_micro_data","text":"","code":"tabulate_cnt_micro_data(   df,   rk_var = \"rkey\",   cat_vars = NULL,   hrc_vars = NULL,   num_var = NULL,   marge_label = \"Total\",   freq_empiriq = FALSE )"},{"path":"https://inseefrlab.github.io/ckm/reference/tabulate_cnt_micro_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build contingency table with margins from microdata — tabulate_cnt_micro_data","text":"df data.frame. Input microdata rk_var Character. Individual key variable (NULL keys) cat_vars Character vector. Categorical variables hrc_vars Named list. Hierarchical variables num_var Character. Numerical variable aggregate marge_label Character. Margin label (default: \"Total\") freq_empiriq Logical. Generate empirical frequencies? (default: FALSE)","code":""},{"path":"https://inseefrlab.github.io/ckm/reference/tabulate_cnt_micro_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build contingency table with margins from microdata — tabulate_cnt_micro_data","text":"Tibble list table frequencies","code":""},{"path":"https://inseefrlab.github.io/ckm/reference/tabulate_cnt_micro_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build contingency table with margins from microdata — tabulate_cnt_micro_data","text":"","code":"library(dplyr) data(\"dtest\") tab_comptage <- tabulate_cnt_micro_data(   df = dtest,   rk_var = NULL,   cat_vars = c(\"DIPLOME\", \"SEXE\", \"AGE\"),   hrc_vars = list(GEO = c(\"REG\", \"DEP\")),   marge_label = \"Total\" ) #> Warning: In the absence of an individual key variable specified in df, no key will be provided for the aggregated table cells.  # With numerical variable to aggregate tab_comptage_num <- tabulate_cnt_micro_data(   df = dtest |> mutate(NUM = 12),   rk_var = NULL,   cat_vars = c(\"DIPLOME\", \"SEXE\", \"AGE\"),   hrc_vars = list(GEO = c(\"REG\", \"DEP\")),   num_var = \"NUM\",   marge_label = \"Total\" ) #> Warning: In the absence of an individual key variable specified in df, no key will be provided for the aggregated table cells."},{"path":"https://inseefrlab.github.io/ckm/reference/test_matrices.html","id":null,"dir":"Reference","previous_headings":"","what":"Test transition matrix construction for different variance values — test_matrices","title":"Test transition matrix construction for different variance values — test_matrices","text":"function tests whether transition matrices can constructed different variance values, given fixed deviation (D) sensitive threshold (js) parameters. uses binary search find minimum variance value allows matrix construction.","code":""},{"path":"https://inseefrlab.github.io/ckm/reference/test_matrices.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test transition matrix construction for different variance values — test_matrices","text":"","code":"test_matrices(D, js = 0, Vmin = 0, Vmax = 30, precision = 1)"},{"path":"https://inseefrlab.github.io/ckm/reference/test_matrices.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test transition matrix construction for different variance values — test_matrices","text":"D integer. Deviation parameter (must strictly positive) js integer. Threshold sensitive values (default: 0). js=0, value 0 forbidden Vmin numeric. Minimum variance value test (default: 0) Vmax numeric. Maximum variance value test (default: 30) precision numeric. Precision binary search algorithm (default: 1)","code":""},{"path":"https://inseefrlab.github.io/ckm/reference/test_matrices.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test transition matrix construction for different variance values — test_matrices","text":"NULL solution exists requested interval,   numeric value variance makes matrix constructible","code":""},{"path":"https://inseefrlab.github.io/ckm/reference/test_matrices.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test transition matrix construction for different variance values — test_matrices","text":"","code":"# Test with basic parameters test_matrices(5, 1) #> Tested interval: [ 0 ; 30 ] #> Tested interval: [ 0 ; 15 ] #> Tested interval: [ 0 ; 7.5 ] #> Tested interval: [ 0 ; 3.75 ] #> Tested interval: [ 0 ; 1.875 ] #> Tested interval: [ 0.9375 ; 1.875 ] #> [1] 1.875"},{"path":"https://inseefrlab.github.io/ckm/reference/visualize_distribution.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize probability distributions from multiple scenarios — visualize_distribution","title":"Visualize probability distributions from multiple scenarios — visualize_distribution","text":"function creates visualizations probability distributions resulting different parameter combinations Cell Key Method. generates bar plots showing probability mass function scenario.","code":""},{"path":"https://inseefrlab.github.io/ckm/reference/visualize_distribution.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize probability distributions from multiple scenarios — visualize_distribution","text":"","code":"visualize_distribution(D = NULL, V = NULL, DV = NULL, precision = 5)"},{"path":"https://inseefrlab.github.io/ckm/reference/visualize_distribution.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize probability distributions from multiple scenarios — visualize_distribution","text":"D integer. Deviation parameter (must strictly positive) V numeric. Noise variance (must strictly positive) DV data.frame. Alternative way specify D V parameters data frame columns \"D\" \"V\". provided, D V parameters ignored precision integer. Precision level probability calculations (default: 5)","code":""},{"path":"https://inseefrlab.github.io/ckm/reference/visualize_distribution.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize probability distributions from multiple scenarios — visualize_distribution","text":"cowplot object containing multiple ggplot bar charts showing   probability distributions parameter combination","code":""},{"path":"https://inseefrlab.github.io/ckm/reference/visualize_distribution.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualize probability distributions from multiple scenarios — visualize_distribution","text":"","code":"# Using separate D and V vectors visualize_distribution(D = c(11, 15), V = c(10, 30))   if (FALSE) { # \\dontrun{ # Using a data frame params_df <- data.frame(D = c(11, 15), V = c(10, 30)) visualize_distribution(DV = params_df) } # }"},{"path":"https://inseefrlab.github.io/ckm/news/index.html","id":"ckm-100","dir":"Changelog","previous_headings":"","what":"ckm 1.0.0","title":"ckm 1.0.0","text":"Initial CRAN release Original names functions translated English: construire_cles_indiv -> build_individual_keys tabuler_et_appliquer_ckm -> tabulate_and_apply_ckm appliquer_ckm -> apply_ckm creer_matrice_transition -> create_transition_matrix creer_table_perturbation -> create_perturbation_table tester_matrices -> test_matrices mesurer_risque -> assess_risk mesurer_RU -> assess_RU mesurer_RUs -> assess_RUs simuler_RUs -> simulate_RUs tabuler_et_appliquer_ckm_liste -> tabulate_and_apply_ckm_list visualiser_distribution -> visualize_distribution estimer_beta -> estimate_beta estimer_beta_df -> estimate_beta_df","code":""},{"path":"https://inseefrlab.github.io/ckm/news/index.html","id":"ckm-1-0-0","dir":"Changelog","previous_headings":"","what":"ckm 0.3.9410","title":"ckm 1.0.0","text":"Modification: measure_RU: Measures risk utility given scenario measure_RUs: Compares risk utility several scenarios simulate_RUs: Compares risk utility several scenarios based multiple simulations default, arguments J set NULL, disabling risk measurement default using apply_ckm tabuler_et_appliquer_ckm. New function: Apply method several tables : tabulate_and_apply_ckm_list","code":""},{"path":"https://inseefrlab.github.io/ckm/news/index.html","id":"ckm-1-0-0-1","dir":"Changelog","previous_headings":"","what":"ckm 0.2.2","title":"ckm 1.0.0","text":"[13/11/2024] Modification: tester_matrices: la fonction recherche désormais une variance minimale dans un intervalle défini par l’utilisateur et par dichotomie","code":""},{"path":"https://inseefrlab.github.io/ckm/news/index.html","id":"ckm-1-0-0-2","dir":"Changelog","previous_headings":"","what":"ckm 0.2.0","title":"ckm 1.0.0","text":"[29/10/24] Ajout: mesure du risque mesure de l’utilité recherche variance Modification: construire_cles_indiv: La dépendance au package cellKey est supprimée et l’argument seed été supprimé. L’utilisateur devra appeler la fonction set.seed() pour fixer la graine aléatoire. appliquer_ckm et tabuler_et_appliquer_ckm revues pour intégrer la mesure du risque et de l’utilité.","code":""},{"path":"https://inseefrlab.github.io/ckm/news/index.html","id":"ckm-1-0-0-3","dir":"Changelog","previous_headings":"","what":"ckm 0.1.0","title":"ckm 1.0.0","text":"[02/08/24] Première version contenant les fonctions : construire_cles_indiv tabulate_cnt_micro_data tabuler_et_appliquer_ckm appliquer_ckm creer_matrice_transition creer_table_perturbation","code":""}]
