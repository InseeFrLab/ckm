% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/estimer_intervalle_confiance_ratio.R
\name{estimate_beta}
\alias{estimate_beta}
\title{Estimate minimal precision threshold \eqn{\beta} for given error level \eqn{\alpha}}
\usage{
estimate_beta(
  A,
  B,
  fun = function(a, b) {
     a/b * 100
 },
  D,
  V,
  js = 0,
  ptab,
  beta_min = 0,
  beta_max = 10,
  precision = 0.1,
  alpha = 0.05,
  posterior = FALSE
)
}
\arguments{
\item{A}{Numerator value}

\item{B}{Denominator value}

\item{fun}{Function. Statistic calculation (default: a/b*100)}

\item{D}{Integer. Maximum deviation}

\item{V}{Numeric. Noise variance}

\item{js}{Integer. Sensitivity threshold}

\item{ptab}{data.frame. Transition probabilities from ptable}

\item{beta_min}{Numeric. Minimum of the search range for \eqn{\beta}}

\item{beta_max}{Numeric. Maximum of the search range for \eqn{\beta}}

\item{precision}{Numeric. Search step size}

\item{alpha}{Numeric. Target error level}

\item{posterior}{Logical. Use posterior approach? (default: FALSE)}
}
\value{
Numeric. Minimal \eqn{\beta} value
}
\description{
Finds minimal \eqn{\beta} where P(|R-R'|>\eqn{\beta}) < \eqn{\alpha} for given \eqn{\alpha} and CKM parameters.
}
\details{
If \code{posterior=FALSE}, the calculation is based on the a priori approach,
that is, the provided ratio (A/B) is the original/real ratio.
Otherwise, the calculation is based on the a posteriori approach,
that is, the provided ratio (A/B) is the ratio resulting from CKM perturbation.
The best beta is searched in the interval [beta_min; beta_max].
}
\examples{
\dontrun{
library(dplyr)
ptab <- ptable::create_cnt_ptable(D = 15, V = 30.1, js = 0)@pTable |>
  as.data.frame()
r1 <- estimate_proba_precision_statistic(
  A=100,B=1500,D = 15, V = 30.1, js = 0, ptab = ptab, betas = seq(0,10,0.1)
)
r1 |> filter(proba <= 0.05) |> head(1) |> pull(beta)
estimate_beta(A=100,B=1500,D = 15, V = 30.1, js = 0, ptab = ptab)
r2 <- estimate_proba_precision_statistic(
  A=100,B=1500,
  D = 15, V = 30.1, js = 0,
  ptab = ptab,
  betas = seq(0,10,0.1),
  posterior = TRUE
)
r2 |> filter(proba <= 0.05) |> head(1) |> pull(beta)
estimate_beta(
  A=100,B=1500,
  D = 15, V = 30.1, js = 0,
  ptab = ptab,
  posterior = TRUE
 )
}
}
