% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/estimer_intervalle_confiance_ratio.R
\name{estimate_beta_df}
\alias{estimate_beta_df}
\title{Estimate Confidence Intervals for Ratios Using Beta Distribution}
\usage{
estimate_beta_df(
  data,
  fun = function(a, b) {
     a/b * 100
 },
  D,
  V,
  js = 0,
  beta_min = 0,
  beta_max = 10,
  precision = 0.1,
  alpha = 0.05,
  posterior = FALSE,
  parallel = FALSE,
  max_cores = NULL
)
}
\arguments{
\item{data}{A data frame or tibble with two columns: numerators and denominators.}

\item{fun}{Function. Statistic calculation (default: a/b*100)}

\item{D}{Integer. Maximum deviation}

\item{V}{Numeric. Noise variance}

\item{js}{Integer. Sensitivity threshold}

\item{beta_min}{Numeric. Minimum of the search range for \eqn{\beta}}

\item{beta_max}{Numeric. Maximum of the search range for \eqn{\beta}}

\item{precision}{Numeric. Search step size}

\item{alpha}{Numeric. Target error level}

\item{posterior}{Logical. Use posterior approach? (default: FALSE)}

\item{parallel}{Logical. If \code{TRUE}, computations are performed in parallel using available CPU cores. Default is \code{FALSE}.}

\item{max_cores}{Integer or \code{NULL}. Maximum number of CPU cores to use for parallel computation. If \code{NULL}, uses all but one core.}
}
\value{
A tibble with columns:
  \describe{
    \item{A}{Numerator value}
    \item{B}{Denominator value}
    \item{R}{Computed ratio using \code{fun}}
    \item{alpha}{Significance level used}
    \item{beta}{Estimated confidence interval or beta parameter}
  }
}
\description{
This function computes confidence intervals for ratios using the beta distribution,
for each unique pair of numerator and denominator in the provided data. It supports
both sequential and parallel computation, and allows customization of the ratio function,
confidence level, and beta estimation parameters.
}
\details{
The function removes duplicate rows from the input data before computation.
Parallel computation is handled via the \code{future} and \code{furrr} packages.
}
\examples{
nums <- c(20, 80)
denoms <- c(100, 200)
test <- data.frame(
  A = sort(rep(nums,length(denoms))),
  B = rep(denoms, each = length(nums))
)

fun = \(a,b){a/b * 100}
D = 5
V = 1

# A priori approach
res <- estimate_beta_df(test, fun, D, V)
# A posteriori approach
res_ap <- estimate_beta_df(test, fun, D, V, posterior = TRUE)

}
